/* tslint:disable */
/* eslint-disable */
/**
 * Montelo API SDK
 * This server handles creating traces and logs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDatapointRunInput,
  DatapointRunDto,
  EventQueuedDto,
  UpdateDatapointRunInput,
} from '../models/index';
import {
    CreateDatapointRunInputFromJSON,
    CreateDatapointRunInputToJSON,
    DatapointRunDtoFromJSON,
    DatapointRunDtoToJSON,
    EventQueuedDtoFromJSON,
    EventQueuedDtoToJSON,
    UpdateDatapointRunInputFromJSON,
    UpdateDatapointRunInputToJSON,
} from '../models/index';

export interface DatapointRunControllerCreateDatapointRunRequest {
    createDatapointRunInput: CreateDatapointRunInput;
}

export interface DatapointRunControllerUpdateDatapointRunRequest {
    updateDatapointRunInput: UpdateDatapointRunInput;
}

/**
 * 
 */
export class DatapointRunApi extends runtime.BaseAPI {

    /**
     */
    async datapointRunControllerCreateDatapointRunRaw(requestParameters: DatapointRunControllerCreateDatapointRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatapointRunDto>> {
        if (requestParameters.createDatapointRunInput === null || requestParameters.createDatapointRunInput === undefined) {
            throw new runtime.RequiredError('createDatapointRunInput','Required parameter requestParameters.createDatapointRunInput was null or undefined when calling datapointRunControllerCreateDatapointRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datapoint-run`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDatapointRunInputToJSON(requestParameters.createDatapointRunInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatapointRunDtoFromJSON(jsonValue));
    }

    /**
     */
    async datapointRunControllerCreateDatapointRun(requestParameters: DatapointRunControllerCreateDatapointRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatapointRunDto> {
        const response = await this.datapointRunControllerCreateDatapointRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async datapointRunControllerUpdateDatapointRunRaw(requestParameters: DatapointRunControllerUpdateDatapointRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventQueuedDto>> {
        if (requestParameters.updateDatapointRunInput === null || requestParameters.updateDatapointRunInput === undefined) {
            throw new runtime.RequiredError('updateDatapointRunInput','Required parameter requestParameters.updateDatapointRunInput was null or undefined when calling datapointRunControllerUpdateDatapointRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datapoint-run`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDatapointRunInputToJSON(requestParameters.updateDatapointRunInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventQueuedDtoFromJSON(jsonValue));
    }

    /**
     */
    async datapointRunControllerUpdateDatapointRun(requestParameters: DatapointRunControllerUpdateDatapointRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventQueuedDto> {
        const response = await this.datapointRunControllerUpdateDatapointRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
