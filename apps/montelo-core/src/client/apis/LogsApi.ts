/* tslint:disable */
/* eslint-disable */
/**
 * Montelo API SDK
 * This server handles creating traces and logs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLogInput,
  EndLogInput,
} from '../models/index';
import {
    CreateLogInputFromJSON,
    CreateLogInputToJSON,
    EndLogInputFromJSON,
    EndLogInputToJSON,
} from '../models/index';

export interface LogsControllerCreateLogRequest {
    createLogInput: CreateLogInput;
}

export interface LogsControllerEndLogRequest {
    logId: string;
    endLogInput: EndLogInput;
}

/**
 * 
 */
export class LogsApi extends runtime.BaseAPI {

    /**
     */
    async logsControllerCreateLogRaw(requestParameters: LogsControllerCreateLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createLogInput === null || requestParameters.createLogInput === undefined) {
            throw new runtime.RequiredError('createLogInput','Required parameter requestParameters.createLogInput was null or undefined when calling logsControllerCreateLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLogInputToJSON(requestParameters.createLogInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async logsControllerCreateLog(requestParameters: LogsControllerCreateLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsControllerCreateLogRaw(requestParameters, initOverrides);
    }

    /**
     */
    async logsControllerEndLogRaw(requestParameters: LogsControllerEndLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logId === null || requestParameters.logId === undefined) {
            throw new runtime.RequiredError('logId','Required parameter requestParameters.logId was null or undefined when calling logsControllerEndLog.');
        }

        if (requestParameters.endLogInput === null || requestParameters.endLogInput === undefined) {
            throw new runtime.RequiredError('endLogInput','Required parameter requestParameters.endLogInput was null or undefined when calling logsControllerEndLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logs/{logId}/end`.replace(`{${"logId"}}`, encodeURIComponent(String(requestParameters.logId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EndLogInputToJSON(requestParameters.endLogInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async logsControllerEndLog(requestParameters: LogsControllerEndLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsControllerEndLogRaw(requestParameters, initOverrides);
    }

}
