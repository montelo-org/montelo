/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddToDatasetInput,
  DatapointDto,
  DeleteSuccessDto,
} from '../models/index';
import {
    AddToDatasetInputFromJSON,
    AddToDatasetInputToJSON,
    DatapointDtoFromJSON,
    DatapointDtoToJSON,
    DeleteSuccessDtoFromJSON,
    DeleteSuccessDtoToJSON,
} from '../models/index';

export interface DatapointControllerCreateDatapointRequest {
    datasetId: string;
    addToDatasetInput: AddToDatasetInput;
}

export interface DatapointControllerDeleteDatapointRequest {
    datapointId: string;
}

/**
 * 
 */
export class DatapointApi extends runtime.BaseAPI {

    /**
     */
    async datapointControllerCreateDatapointRaw(requestParameters: DatapointControllerCreateDatapointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatapointDto>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling datapointControllerCreateDatapoint.');
        }

        if (requestParameters.addToDatasetInput === null || requestParameters.addToDatasetInput === undefined) {
            throw new runtime.RequiredError('addToDatasetInput','Required parameter requestParameters.addToDatasetInput was null or undefined when calling datapointControllerCreateDatapoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/dataset/{datasetId}/datapoint`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddToDatasetInputToJSON(requestParameters.addToDatasetInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatapointDtoFromJSON(jsonValue));
    }

    /**
     */
    async datapointControllerCreateDatapoint(requestParameters: DatapointControllerCreateDatapointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatapointDto> {
        const response = await this.datapointControllerCreateDatapointRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async datapointControllerDeleteDatapointRaw(requestParameters: DatapointControllerDeleteDatapointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSuccessDto>> {
        if (requestParameters.datapointId === null || requestParameters.datapointId === undefined) {
            throw new runtime.RequiredError('datapointId','Required parameter requestParameters.datapointId was null or undefined when calling datapointControllerDeleteDatapoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datapoint/{datapointId}`.replace(`{${"datapointId"}}`, encodeURIComponent(String(requestParameters.datapointId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSuccessDtoFromJSON(jsonValue));
    }

    /**
     */
    async datapointControllerDeleteDatapoint(requestParameters: DatapointControllerDeleteDatapointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSuccessDto> {
        const response = await this.datapointControllerDeleteDatapointRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
