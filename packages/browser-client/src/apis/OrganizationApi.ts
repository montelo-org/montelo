/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProjectInput,
  FullProjectDto,
  ProjectDto,
} from '../models/index';
import {
    CreateProjectInputFromJSON,
    CreateProjectInputToJSON,
    FullProjectDtoFromJSON,
    FullProjectDtoToJSON,
    ProjectDtoFromJSON,
    ProjectDtoToJSON,
} from '../models/index';

export interface OrganizationControllerCreateProjectRequest {
    createProjectInput: CreateProjectInput;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     */
    async organizationControllerCreateProjectRaw(requestParameters: OrganizationControllerCreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.createProjectInput === null || requestParameters.createProjectInput === undefined) {
            throw new runtime.RequiredError('createProjectInput','Required parameter requestParameters.createProjectInput was null or undefined when calling organizationControllerCreateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectInputToJSON(requestParameters.createProjectInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async organizationControllerCreateProject(requestParameters: OrganizationControllerCreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDto> {
        const response = await this.organizationControllerCreateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationControllerGetProjectsForOrgRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FullProjectDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullProjectDtoFromJSON));
    }

    /**
     */
    async organizationControllerGetProjectsForOrg(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FullProjectDto>> {
        const response = await this.organizationControllerGetProjectsForOrgRaw(initOverrides);
        return await response.value();
    }

}
