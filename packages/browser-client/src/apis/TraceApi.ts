/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteSuccessDto,
  TraceWithLogsDto,
} from '../models/index';
import {
    DeleteSuccessDtoFromJSON,
    DeleteSuccessDtoToJSON,
    TraceWithLogsDtoFromJSON,
    TraceWithLogsDtoToJSON,
} from '../models/index';

export interface TraceControllerDeleteTraceRequest {
    traceId: string;
}

export interface TraceControllerGetTraceRequest {
    traceId: string;
}

/**
 * 
 */
export class TraceApi extends runtime.BaseAPI {

    /**
     */
    async traceControllerDeleteTraceRaw(requestParameters: TraceControllerDeleteTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSuccessDto>> {
        if (requestParameters.traceId === null || requestParameters.traceId === undefined) {
            throw new runtime.RequiredError('traceId','Required parameter requestParameters.traceId was null or undefined when calling traceControllerDeleteTrace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trace/{traceId}`.replace(`{${"traceId"}}`, encodeURIComponent(String(requestParameters.traceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSuccessDtoFromJSON(jsonValue));
    }

    /**
     */
    async traceControllerDeleteTrace(requestParameters: TraceControllerDeleteTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSuccessDto> {
        const response = await this.traceControllerDeleteTraceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async traceControllerGetTraceRaw(requestParameters: TraceControllerGetTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceWithLogsDto>> {
        if (requestParameters.traceId === null || requestParameters.traceId === undefined) {
            throw new runtime.RequiredError('traceId','Required parameter requestParameters.traceId was null or undefined when calling traceControllerGetTrace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trace/{traceId}`.replace(`{${"traceId"}}`, encodeURIComponent(String(requestParameters.traceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraceWithLogsDtoFromJSON(jsonValue));
    }

    /**
     */
    async traceControllerGetTrace(requestParameters: TraceControllerGetTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceWithLogsDto> {
        const response = await this.traceControllerGetTraceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
