/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyWithEnvDto,
} from '../models/index';
import {
    ApiKeyWithEnvDtoFromJSON,
    ApiKeyWithEnvDtoToJSON,
} from '../models/index';

export interface ApiKeyControllerGetAllForProjectRequest {
    projectId: string;
}

export interface ApiKeyControllerRevealRequest {
    apiKeyId: string;
}

export interface ApiKeyControllerRotateRequest {
    apiKeyId: string;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     */
    async apiKeyControllerGetAllForProjectRaw(requestParameters: ApiKeyControllerGetAllForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKeyWithEnvDto>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiKeyControllerGetAllForProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/{projectId}/api-keys`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyWithEnvDtoFromJSON));
    }

    /**
     */
    async apiKeyControllerGetAllForProject(requestParameters: ApiKeyControllerGetAllForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKeyWithEnvDto>> {
        const response = await this.apiKeyControllerGetAllForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiKeyControllerRevealRaw(requestParameters: ApiKeyControllerRevealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyWithEnvDto>> {
        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling apiKeyControllerReveal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api-keys/{apiKeyId}`.replace(`{${"apiKeyId"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyWithEnvDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiKeyControllerReveal(requestParameters: ApiKeyControllerRevealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyWithEnvDto> {
        const response = await this.apiKeyControllerRevealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiKeyControllerRotateRaw(requestParameters: ApiKeyControllerRotateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyWithEnvDto>> {
        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling apiKeyControllerRotate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api-keys/{apiKeyId}`.replace(`{${"apiKeyId"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyWithEnvDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiKeyControllerRotate(requestParameters: ApiKeyControllerRotateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyWithEnvDto> {
        const response = await this.apiKeyControllerRotateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
