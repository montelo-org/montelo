/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CostHistoryDto,
  DashboardAnalyticsDto,
} from '../models/index';
import {
    CostHistoryDtoFromJSON,
    CostHistoryDtoToJSON,
    DashboardAnalyticsDtoFromJSON,
    DashboardAnalyticsDtoToJSON,
} from '../models/index';

export interface AnalyticsControllerGetAnalyticsForEnvRequest {
    envId: string;
    dateSelection: AnalyticsControllerGetAnalyticsForEnvDateSelectionEnum;
}

export interface AnalyticsControllerGetCostHistoryForEnvRequest {
    envId: string;
    dateSelection: AnalyticsControllerGetCostHistoryForEnvDateSelectionEnum;
}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI {

    /**
     */
    async analyticsControllerGetAnalyticsForEnvRaw(requestParameters: AnalyticsControllerGetAnalyticsForEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardAnalyticsDto>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling analyticsControllerGetAnalyticsForEnv.');
        }

        if (requestParameters.dateSelection === null || requestParameters.dateSelection === undefined) {
            throw new runtime.RequiredError('dateSelection','Required parameter requestParameters.dateSelection was null or undefined when calling analyticsControllerGetAnalyticsForEnv.');
        }

        const queryParameters: any = {};

        if (requestParameters.dateSelection !== undefined) {
            queryParameters['dateSelection'] = requestParameters.dateSelection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/env/{envId}/analytics/dashboard`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardAnalyticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async analyticsControllerGetAnalyticsForEnv(requestParameters: AnalyticsControllerGetAnalyticsForEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardAnalyticsDto> {
        const response = await this.analyticsControllerGetAnalyticsForEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async analyticsControllerGetCostHistoryForEnvRaw(requestParameters: AnalyticsControllerGetCostHistoryForEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostHistoryDto>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling analyticsControllerGetCostHistoryForEnv.');
        }

        if (requestParameters.dateSelection === null || requestParameters.dateSelection === undefined) {
            throw new runtime.RequiredError('dateSelection','Required parameter requestParameters.dateSelection was null or undefined when calling analyticsControllerGetCostHistoryForEnv.');
        }

        const queryParameters: any = {};

        if (requestParameters.dateSelection !== undefined) {
            queryParameters['dateSelection'] = requestParameters.dateSelection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/env/{envId}/analytics/cost-history`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CostHistoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async analyticsControllerGetCostHistoryForEnv(requestParameters: AnalyticsControllerGetCostHistoryForEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostHistoryDto> {
        const response = await this.analyticsControllerGetCostHistoryForEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AnalyticsControllerGetAnalyticsForEnvDateSelectionEnum = {
    _30Mins: '30 mins',
    _1Hr: '1 hr',
    _24Hrs: '24 hrs',
    _7Days: '7 days',
    _1Month: '1 month',
    _3Months: '3 months',
    AllTime: 'All Time'
} as const;
export type AnalyticsControllerGetAnalyticsForEnvDateSelectionEnum = typeof AnalyticsControllerGetAnalyticsForEnvDateSelectionEnum[keyof typeof AnalyticsControllerGetAnalyticsForEnvDateSelectionEnum];
/**
 * @export
 */
export const AnalyticsControllerGetCostHistoryForEnvDateSelectionEnum = {
    _30Mins: '30 mins',
    _1Hr: '1 hr',
    _24Hrs: '24 hrs',
    _7Days: '7 days',
    _1Month: '1 month',
    _3Months: '3 months',
    AllTime: 'All Time'
} as const;
export type AnalyticsControllerGetCostHistoryForEnvDateSelectionEnum = typeof AnalyticsControllerGetCostHistoryForEnvDateSelectionEnum[keyof typeof AnalyticsControllerGetCostHistoryForEnvDateSelectionEnum];
