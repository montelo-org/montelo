/* tslint:disable */

/* eslint-disable */

/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DashboardAnalyticsDto } from "../models/index";
import { DashboardAnalyticsDtoFromJSON, DashboardAnalyticsDtoToJSON } from "../models/index";
import * as runtime from "../runtime";

export interface AnalyticsControllerGetForDashboardRequest {
  envId: string;
  dateSelection: AnalyticsControllerGetForDashboardDateSelectionEnum;
}

/**
 *
 */
export class AnalyticsApi extends runtime.BaseAPI {
  /**
   */
  async analyticsControllerGetForDashboardRaw(
    requestParameters: AnalyticsControllerGetForDashboardRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DashboardAnalyticsDto>> {
    if (requestParameters.envId === null || requestParameters.envId === undefined) {
      throw new runtime.RequiredError(
        "envId",
        "Required parameter requestParameters.envId was null or undefined when calling analyticsControllerGetForDashboard.",
      );
    }

    if (requestParameters.dateSelection === null || requestParameters.dateSelection === undefined) {
      throw new runtime.RequiredError(
        "dateSelection",
        "Required parameter requestParameters.dateSelection was null or undefined when calling analyticsControllerGetForDashboard.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.dateSelection !== undefined) {
      queryParameters["dateSelection"] = requestParameters.dateSelection;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/env/{envId}/analytics/dashboard`.replace(
          `{${"envId"}}`,
          encodeURIComponent(String(requestParameters.envId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DashboardAnalyticsDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async analyticsControllerGetForDashboard(
    requestParameters: AnalyticsControllerGetForDashboardRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DashboardAnalyticsDto> {
    const response = await this.analyticsControllerGetForDashboardRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const AnalyticsControllerGetForDashboardDateSelectionEnum = {
  _30Mins: "30 mins",
  _1Hr: "1 hr",
  _24Hrs: "24 hrs",
  _7Days: "7 days",
  _1Month: "1 month",
  _3Months: "3 months",
  AllTime: "All Time",
} as const;
export type AnalyticsControllerGetForDashboardDateSelectionEnum =
  (typeof AnalyticsControllerGetForDashboardDateSelectionEnum)[keyof typeof AnalyticsControllerGetForDashboardDateSelectionEnum];
