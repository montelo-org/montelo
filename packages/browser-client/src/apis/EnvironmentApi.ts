/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEnvInput,
  EnvironmentDto,
} from '../models/index';
import {
    CreateEnvInputFromJSON,
    CreateEnvInputToJSON,
    EnvironmentDtoFromJSON,
    EnvironmentDtoToJSON,
} from '../models/index';

export interface EnvironmentControllerCreateRequest {
    createEnvInput: CreateEnvInput;
}

export interface EnvironmentControllerGetRequest {
    envId: string;
}

/**
 * 
 */
export class EnvironmentApi extends runtime.BaseAPI {

    /**
     */
    async environmentControllerCreateRaw(requestParameters: EnvironmentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvironmentDto>> {
        if (requestParameters.createEnvInput === null || requestParameters.createEnvInput === undefined) {
            throw new runtime.RequiredError('createEnvInput','Required parameter requestParameters.createEnvInput was null or undefined when calling environmentControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/env`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnvInputToJSON(requestParameters.createEnvInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentDtoFromJSON(jsonValue));
    }

    /**
     */
    async environmentControllerCreate(requestParameters: EnvironmentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvironmentDto> {
        const response = await this.environmentControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async environmentControllerGetRaw(requestParameters: EnvironmentControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvironmentDto>> {
        if (requestParameters.envId === null || requestParameters.envId === undefined) {
            throw new runtime.RequiredError('envId','Required parameter requestParameters.envId was null or undefined when calling environmentControllerGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/env/{envId}`.replace(`{${"envId"}}`, encodeURIComponent(String(requestParameters.envId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentDtoFromJSON(jsonValue));
    }

    /**
     */
    async environmentControllerGet(requestParameters: EnvironmentControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvironmentDto> {
        const response = await this.environmentControllerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
