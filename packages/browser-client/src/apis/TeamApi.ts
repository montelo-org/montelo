/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTeamInput,
  DeleteSuccessDto,
  TeamDto,
} from '../models/index';
import {
    CreateTeamInputFromJSON,
    CreateTeamInputToJSON,
    DeleteSuccessDtoFromJSON,
    DeleteSuccessDtoToJSON,
    TeamDtoFromJSON,
    TeamDtoToJSON,
} from '../models/index';

export interface TeamControllerCreateRequest {
    createTeamInput: CreateTeamInput;
}

export interface TeamControllerDeleteRequest {
    id: string;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     */
    async teamControllerCreateRaw(requestParameters: TeamControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters.createTeamInput === null || requestParameters.createTeamInput === undefined) {
            throw new runtime.RequiredError('createTeamInput','Required parameter requestParameters.createTeamInput was null or undefined when calling teamControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/team`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamInputToJSON(requestParameters.createTeamInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     */
    async teamControllerCreate(requestParameters: TeamControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async teamControllerDeleteRaw(requestParameters: TeamControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSuccessDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/team/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSuccessDtoFromJSON(jsonValue));
    }

    /**
     */
    async teamControllerDelete(requestParameters: TeamControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSuccessDto> {
        const response = await this.teamControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
