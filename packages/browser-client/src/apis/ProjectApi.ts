/* tslint:disable */

/* eslint-disable */

/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CreateProjectInput, FullProjectDto, ProjectDto } from "../models/index";
import {
  CreateProjectInputFromJSON,
  CreateProjectInputToJSON,
  FullProjectDtoFromJSON,
  FullProjectDtoToJSON,
  ProjectDtoFromJSON,
  ProjectDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface ProjectControllerCreateRequest {
  createProjectInput: CreateProjectInput;
}

export interface ProjectControllerGetRequest {
  projectId: string;
}

/**
 *
 */
export class ProjectApi extends runtime.BaseAPI {
  /**
   */
  async projectControllerCreateRaw(
    requestParameters: ProjectControllerCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectDto>> {
    if (
      requestParameters.createProjectInput === null ||
      requestParameters.createProjectInput === undefined
    ) {
      throw new runtime.RequiredError(
        "createProjectInput",
        "Required parameter requestParameters.createProjectInput was null or undefined when calling projectControllerCreate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/project`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateProjectInputToJSON(requestParameters.createProjectInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
  }

  /**
   */
  async projectControllerCreate(
    requestParameters: ProjectControllerCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectDto> {
    const response = await this.projectControllerCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async projectControllerGetRaw(
    requestParameters: ProjectControllerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FullProjectDto>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        "projectId",
        "Required parameter requestParameters.projectId was null or undefined when calling projectControllerGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/project/{projectId}`.replace(
          `{${"projectId"}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FullProjectDtoFromJSON(jsonValue));
  }

  /**
   */
  async projectControllerGet(
    requestParameters: ProjectControllerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FullProjectDto> {
    const response = await this.projectControllerGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
