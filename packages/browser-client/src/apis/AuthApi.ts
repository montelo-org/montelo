/* tslint:disable */

/* eslint-disable */

/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AuthUserDto, LoginDto, LoginUserInput, RegisterUserInput } from "../models/index";
import {
  AuthUserDtoFromJSON,
  AuthUserDtoToJSON,
  LoginDtoFromJSON,
  LoginDtoToJSON,
  LoginUserInputFromJSON,
  LoginUserInputToJSON,
  RegisterUserInputFromJSON,
  RegisterUserInputToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface AuthControllerLoginRequest {
  loginUserInput: LoginUserInput;
}

export interface AuthControllerRegisterRequest {
  registerUserInput: RegisterUserInput;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   */
  async authControllerLoginRaw(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LoginDto>> {
    if (
      requestParameters.loginUserInput === null ||
      requestParameters.loginUserInput === undefined
    ) {
      throw new runtime.RequiredError(
        "loginUserInput",
        "Required parameter requestParameters.loginUserInput was null or undefined when calling authControllerLogin.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginUserInputToJSON(requestParameters.loginUserInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => LoginDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerLogin(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LoginDto> {
    const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async authControllerRegisterRaw(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthUserDto>> {
    if (
      requestParameters.registerUserInput === null ||
      requestParameters.registerUserInput === undefined
    ) {
      throw new runtime.RequiredError(
        "registerUserInput",
        "Required parameter requestParameters.registerUserInput was null or undefined when calling authControllerRegister.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/register`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RegisterUserInputToJSON(requestParameters.registerUserInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthUserDtoFromJSON(jsonValue));
  }

  /**
   */
  async authControllerRegister(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthUserDto> {
    const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
