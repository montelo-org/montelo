/* tslint:disable */

/* eslint-disable */

/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists, mapValues } from "../runtime";
import type { LogDto } from "./LogDto";
import { LogDtoFromJSON, LogDtoFromJSONTyped, LogDtoToJSON } from "./LogDto";

/**
 *
 * @export
 * @interface TraceWithLogsDto
 */
export interface TraceWithLogsDto {
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  envId: string;
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  inputTokens: number;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  outputTokens: number;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  totalTokens: number;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  inputCost: number;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  outputCost: number;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  totalCost: number;
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  startTime: string;
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  endTime: string;
  /**
   *
   * @type {number}
   * @memberof TraceWithLogsDto
   */
  duration: number;
  /**
   *
   * @type {string}
   * @memberof TraceWithLogsDto
   */
  userId: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof TraceWithLogsDto
   */
  tags: Array<string>;
  /**
   *
   * @type {object}
   * @memberof TraceWithLogsDto
   */
  extra: object;
  /**
   *
   * @type {Array<LogDto>}
   * @memberof TraceWithLogsDto
   */
  logs: Array<LogDto>;
}

/**
 * Check if a given object implements the TraceWithLogsDto interface.
 */
export function instanceOfTraceWithLogsDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "envId" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "inputTokens" in value;
  isInstance = isInstance && "outputTokens" in value;
  isInstance = isInstance && "totalTokens" in value;
  isInstance = isInstance && "inputCost" in value;
  isInstance = isInstance && "outputCost" in value;
  isInstance = isInstance && "totalCost" in value;
  isInstance = isInstance && "startTime" in value;
  isInstance = isInstance && "endTime" in value;
  isInstance = isInstance && "duration" in value;
  isInstance = isInstance && "userId" in value;
  isInstance = isInstance && "tags" in value;
  isInstance = isInstance && "extra" in value;
  isInstance = isInstance && "logs" in value;

  return isInstance;
}

export function TraceWithLogsDtoFromJSON(json: any): TraceWithLogsDto {
  return TraceWithLogsDtoFromJSONTyped(json, false);
}

export function TraceWithLogsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceWithLogsDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    envId: json["envId"],
    name: json["name"],
    inputTokens: json["inputTokens"],
    outputTokens: json["outputTokens"],
    totalTokens: json["totalTokens"],
    inputCost: json["inputCost"],
    outputCost: json["outputCost"],
    totalCost: json["totalCost"],
    startTime: json["startTime"],
    endTime: json["endTime"],
    duration: json["duration"],
    userId: json["userId"],
    tags: json["tags"],
    extra: json["extra"],
    logs: (json["logs"] as Array<any>).map(LogDtoFromJSON),
  };
}

export function TraceWithLogsDtoToJSON(value?: TraceWithLogsDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    envId: value.envId,
    name: value.name,
    inputTokens: value.inputTokens,
    outputTokens: value.outputTokens,
    totalTokens: value.totalTokens,
    inputCost: value.inputCost,
    outputCost: value.outputCost,
    totalCost: value.totalCost,
    startTime: value.startTime,
    endTime: value.endTime,
    duration: value.duration,
    userId: value.userId,
    tags: value.tags,
    extra: value.extra,
    logs: (value.logs as Array<any>).map(LogDtoToJSON),
  };
}
