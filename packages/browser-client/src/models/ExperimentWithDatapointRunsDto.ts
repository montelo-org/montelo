/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DatasetDto } from './DatasetDto';
import {
    DatasetDtoFromJSON,
    DatasetDtoFromJSONTyped,
    DatasetDtoToJSON,
} from './DatasetDto';
import type { FullDatapointRunDto } from './FullDatapointRunDto';
import {
    FullDatapointRunDtoFromJSON,
    FullDatapointRunDtoFromJSONTyped,
    FullDatapointRunDtoToJSON,
} from './FullDatapointRunDto';

/**
 * 
 * @export
 * @interface ExperimentWithDatapointRunsDto
 */
export interface ExperimentWithDatapointRunsDto {
    /**
     * 
     * @type {string}
     * @memberof ExperimentWithDatapointRunsDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentWithDatapointRunsDto
     */
    datasetId: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentWithDatapointRunsDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentWithDatapointRunsDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentWithDatapointRunsDto
     */
    createdAt: string;
    /**
     * 
     * @type {DatasetDto}
     * @memberof ExperimentWithDatapointRunsDto
     */
    dataset: DatasetDto;
    /**
     * 
     * @type {Array<FullDatapointRunDto>}
     * @memberof ExperimentWithDatapointRunsDto
     */
    datapointRuns: Array<FullDatapointRunDto>;
}

/**
 * Check if a given object implements the ExperimentWithDatapointRunsDto interface.
 */
export function instanceOfExperimentWithDatapointRunsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "datasetId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "dataset" in value;
    isInstance = isInstance && "datapointRuns" in value;

    return isInstance;
}

export function ExperimentWithDatapointRunsDtoFromJSON(json: any): ExperimentWithDatapointRunsDto {
    return ExperimentWithDatapointRunsDtoFromJSONTyped(json, false);
}

export function ExperimentWithDatapointRunsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentWithDatapointRunsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'datasetId': json['datasetId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': json['createdAt'],
        'dataset': DatasetDtoFromJSON(json['dataset']),
        'datapointRuns': ((json['datapointRuns'] as Array<any>).map(FullDatapointRunDtoFromJSON)),
    };
}

export function ExperimentWithDatapointRunsDtoToJSON(value?: ExperimentWithDatapointRunsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'datasetId': value.datasetId,
        'name': value.name,
        'description': value.description,
        'createdAt': value.createdAt,
        'dataset': DatasetDtoToJSON(value.dataset),
        'datapointRuns': ((value.datapointRuns as Array<any>).map(FullDatapointRunDtoToJSON)),
    };
}

