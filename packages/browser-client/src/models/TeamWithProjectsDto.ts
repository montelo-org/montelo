/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProjectWithEnvironmentsDto } from './ProjectWithEnvironmentsDto';
import {
    ProjectWithEnvironmentsDtoFromJSON,
    ProjectWithEnvironmentsDtoFromJSONTyped,
    ProjectWithEnvironmentsDtoToJSON,
} from './ProjectWithEnvironmentsDto';

/**
 * 
 * @export
 * @interface TeamWithProjectsDto
 */
export interface TeamWithProjectsDto {
    /**
     * 
     * @type {string}
     * @memberof TeamWithProjectsDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TeamWithProjectsDto
     */
    name: string;
    /**
     * 
     * @type {Array<ProjectWithEnvironmentsDto>}
     * @memberof TeamWithProjectsDto
     */
    projects: Array<ProjectWithEnvironmentsDto>;
}

/**
 * Check if a given object implements the TeamWithProjectsDto interface.
 */
export function instanceOfTeamWithProjectsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "projects" in value;

    return isInstance;
}

export function TeamWithProjectsDtoFromJSON(json: any): TeamWithProjectsDto {
    return TeamWithProjectsDtoFromJSONTyped(json, false);
}

export function TeamWithProjectsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamWithProjectsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'projects': ((json['projects'] as Array<any>).map(ProjectWithEnvironmentsDtoFromJSON)),
    };
}

export function TeamWithProjectsDtoToJSON(value?: TeamWithProjectsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'projects': ((value.projects as Array<any>).map(ProjectWithEnvironmentsDtoToJSON)),
    };
}

