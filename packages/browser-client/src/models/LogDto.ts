/* tslint:disable */
/* eslint-disable */
/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LogDto
 */
export interface LogDto {
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    id: string;
    /**
     * 
     * @type {object}
     * @memberof LogDto
     */
    messages: object;
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    model: string;
    /**
     * 
     * @type {object}
     * @memberof LogDto
     */
    rawInput: object;
    /**
     * 
     * @type {object}
     * @memberof LogDto
     */
    rawOutput: object;
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    endTime: string;
    /**
     * 
     * @type {number}
     * @memberof LogDto
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof LogDto
     */
    inputTokenCount: number;
    /**
     * 
     * @type {number}
     * @memberof LogDto
     */
    outputTokenCount: number;
    /**
     * 
     * @type {number}
     * @memberof LogDto
     */
    totalTokenCount: number;
}

/**
 * Check if a given object implements the LogDto interface.
 */
export function instanceOfLogDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "messages" in value;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "rawInput" in value;
    isInstance = isInstance && "rawOutput" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "inputTokenCount" in value;
    isInstance = isInstance && "outputTokenCount" in value;
    isInstance = isInstance && "totalTokenCount" in value;

    return isInstance;
}

export function LogDtoFromJSON(json: any): LogDto {
    return LogDtoFromJSONTyped(json, false);
}

export function LogDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'messages': json['messages'],
        'model': json['model'],
        'rawInput': json['rawInput'],
        'rawOutput': json['rawOutput'],
        'startTime': json['startTime'],
        'endTime': json['endTime'],
        'duration': json['duration'],
        'inputTokenCount': json['inputTokenCount'],
        'outputTokenCount': json['outputTokenCount'],
        'totalTokenCount': json['totalTokenCount'],
    };
}

export function LogDtoToJSON(value?: LogDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'messages': value.messages,
        'model': value.model,
        'rawInput': value.rawInput,
        'rawOutput': value.rawOutput,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'duration': value.duration,
        'inputTokenCount': value.inputTokenCount,
        'outputTokenCount': value.outputTokenCount,
        'totalTokenCount': value.totalTokenCount,
    };
}

