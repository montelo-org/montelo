/* tslint:disable */

/* eslint-disable */

/**
 * Montelo
 * Documentation for the Montelo API.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists, mapValues } from "../runtime";
import type { EnvironmentDto } from "./EnvironmentDto";
import { EnvironmentDtoFromJSON, EnvironmentDtoFromJSONTyped, EnvironmentDtoToJSON } from "./EnvironmentDto";

/**
 *
 * @export
 * @interface ApiKeyWithEnvDto
 */
export interface ApiKeyWithEnvDto {
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithEnvDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithEnvDto
   */
  envId: string;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithEnvDto
   */
  key: string;
  /**
   *
   * @type {boolean}
   * @memberof ApiKeyWithEnvDto
   */
  viewed: boolean;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithEnvDto
   */
  updatedAt: string;
  /**
   *
   * @type {EnvironmentDto}
   * @memberof ApiKeyWithEnvDto
   */
  environment: EnvironmentDto;
}

/**
 * Check if a given object implements the ApiKeyWithEnvDto interface.
 */
export function instanceOfApiKeyWithEnvDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "envId" in value;
  isInstance = isInstance && "key" in value;
  isInstance = isInstance && "viewed" in value;
  isInstance = isInstance && "updatedAt" in value;
  isInstance = isInstance && "environment" in value;

  return isInstance;
}

export function ApiKeyWithEnvDtoFromJSON(json: any): ApiKeyWithEnvDto {
  return ApiKeyWithEnvDtoFromJSONTyped(json, false);
}

export function ApiKeyWithEnvDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiKeyWithEnvDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    envId: json["envId"],
    key: json["key"],
    viewed: json["viewed"],
    updatedAt: json["updatedAt"],
    environment: EnvironmentDtoFromJSON(json["environment"]),
  };
}

export function ApiKeyWithEnvDtoToJSON(value?: ApiKeyWithEnvDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    envId: value.envId,
    key: value.key,
    viewed: value.viewed,
    updatedAt: value.updatedAt,
    environment: EnvironmentDtoToJSON(value.environment),
  };
}
