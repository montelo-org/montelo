datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// Enums
enum UserPermissionRole {
  ADMIN
  MEMBER
}

// Models
model Team {
  // id
  id String @id @default(cuid())

  // properties
  name String

  // relations
  projects Project[]
  members  Membership[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("team")
}

model Project {
  // id
  id String @id @default(cuid())

  // properties
  name   String
  teamId String @map("team_id")

  // relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  environments Environment[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // attributes
  @@unique([name, teamId])
  // rename
  @@map("project")
}

model Environment {
  // id
  id String @id @default(cuid())

  // properties
  name      String
  projectId String @map("project_id")

  // relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  logs    Log[]
  apiKey  ApiKey?

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("environment")
}

model User {
  // id
  id String @id @default(cuid())

  // properties
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String @unique
  password  String

  // relations
  memberships Membership[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("user")
}

model Membership {
  // id
  id String @id @default(cuid())

  // properties
  role   UserPermissionRole
  userId String             @map("user_id")
  teamId String             @map("team_id")

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("membership")
}

model ApiKey {
  // id
  id String @id @default(cuid())

  // properties
  envId    String  @unique @map("env_id")
  public   String  @unique
  private  String  @unique
  combined String  @unique
  viewed   Boolean

  // relations
  environment Environment @relation(fields: [envId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("api_key")
}

model Log {
  // id
  id String @id @default(cuid())

  // properties
  // some are optional to support logging things unrelated to LLM calls
  traceId      String    @map("trace_id")
  envId        String    @map("env_id")
  parentLogId  String?   @map("parent_id")
  name         String
  input        Json
  output       Json
  model        String?
  extra        Json?
  startTime    DateTime? @map("start_time")
  endTime      DateTime? @map("end_time")
  duration     Float?
  inputTokens  Int?      @map("input_tokens")
  outputTokens Int?      @map("output_tokens")
  totalTokens  Int?      @map("total_tokens")
  inputCost    Float?    @map("input_cost")
  outputCost   Float?    @map("output_cost")
  totalCost    Float?    @map("total_cost")

  // relations
  environment Environment @relation(fields: [envId], references: [id], onDelete: Cascade)
  trace       Trace       @relation(fields: [traceId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([envId, startTime])
  // rename
  @@map("log")
}

model Trace {
  // id
  id String @id @default(cuid())

  // properties
  envId String @map("env_id")
  name  String

  // sum for each log of the trace
  inputTokens  Int   @map("input_tokens")
  outputTokens Int   @map("output_tokens")
  totalTokens  Int   @map("total_tokens")
  inputCost    Float @map("input_cost")
  outputCost   Float @map("output_cost")
  totalCost    Float @map("total_cost")

  userId String?  @map("user_id")
  tags   String[] @default([])
  extra  Json?

  // relations
  logs Log[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // indices
  @@index([envId])
  // rename
  @@map("trace")
}
