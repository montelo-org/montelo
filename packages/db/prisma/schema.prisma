datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserPermissionRole {
  MEMBER
  ADMIN
}

model Team {
  // id
  id String @id @default(uuid())

  // properties
  name String

  // relations
  projects Project[]
  members  Membership[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@map("team")
}

model Project {
  // id
  id String @id @default(uuid())

  // properties
  name   String
  teamId String

  // relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  environments Environment[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // attributes
  @@unique([name, teamId])
  // rename
  @@map("project")
}

model Environment {
  // id
  id String @id @default(uuid())

  // properties
  name      String
  projectId String

  // relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  apiKey ApiKey?

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@map("environment")
}

model User {
  // id
  id String @id @default(uuid())

  // properties
  firstName String
  lastName  String
  email     String @unique
  password  String

  // relations
  memberships Membership[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@map("user")
}

model Membership {
  // id
  id String @id @default(uuid())

  // properties
  role   UserPermissionRole
  userId String
  teamId String

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@map("membership")
}

model ApiKey {
  // id
  id String @id @default(uuid())

  // properties
  key    String  @unique
  envId  String  @unique
  viewed Boolean @default(false)

  // relations
  environment Environment @relation(fields: [envId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@map("api_key")
}

model Log {
  // id
  id String @id @default(uuid())

  // properties
  envId String // not a foreign key

  // all fields must be optional
  parentId     String?
  model        String?
  input        Json?
  output       Json?
  startTime    DateTime?
  endTime      DateTime?
  duration     Float?
  inputTokens  Int?
  outputTokens Int?
  totalTokens  Int?
  inputCost    Float?
  outputCost   Float?
  totalCost    Float?
  score        Int?
  feedback     String?
  tags         Json?
  name         String?
  sessionId    String?
  userId       String? // the user can pass in a user ID to a log
  extra        Json? // extra properties users can specify

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // rename
  @@index([envId, startTime])
  @@map("log")
}
