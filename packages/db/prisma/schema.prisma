datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

// Enums
enum LogSources {
  MANUAL
  OPENAI
  ANTHROPIC
  MISTRAL
  COHERE
}

// Models
model Project {
  // id
  id String @id @default(cuid())

  // properties
  name  String
  orgId String @map("org_id")

  environments Environment[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // attributes
  @@unique([name, orgId])
  // rename
  @@map("project")
}

model Environment {
  // id
  id String @id @default(cuid())

  // properties
  name      String
  projectId String @map("project_id")

  // relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  traces  Log[]
  apiKey  ApiKey?

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("environment")
}

model ApiKey {
  // id
  id String @id @default(cuid())

  // properties
  envId    String  @unique @map("env_id")
  public   String  @unique
  private  String  @unique
  combined String  @unique
  viewed   Boolean

  // relations
  environment Environment @relation(fields: [envId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rename
  @@map("api_key")
}

model Log {
  // id
  id String @id @default(cuid())

  // properties
  // some are optional to slack logging things unrelated to LLM calls
  traceId      String     @map("trace_id")
  envId        String     @map("env_id")
  parentLogId  String?    @map("parent_id")
  name         String
  input        Json
  output       Json
  source       LogSources
  model        String?
  extra        Json?
  startTime    DateTime?  @map("start_time")
  endTime      DateTime?  @map("end_time")
  duration     Float?
  inputTokens  Int?       @map("input_tokens")
  outputTokens Int?       @map("output_tokens")
  totalTokens  Int?       @map("total_tokens")
  inputCost    Float?     @map("input_cost")
  outputCost   Float?     @map("output_cost")
  totalCost    Float?     @map("total_cost")

  // relations
  environment Environment @relation(fields: [envId], references: [id], onDelete: Cascade)
  trace       Trace       @relation(fields: [traceId], references: [id], onDelete: Cascade)

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([envId, startTime])
  // rename
  @@map("log")
}

model Trace {
  // id
  id String @id @default(cuid())

  // properties
  envId String @map("env_id")
  name  String

  // sum for each log of the trace
  inputTokens  Int      @map("input_tokens")
  outputTokens Int      @map("output_tokens")
  totalTokens  Int      @map("total_tokens")
  inputCost    Float    @map("input_cost")
  outputCost   Float    @map("output_cost")
  totalCost    Float    @map("total_cost")
  startTime    DateTime @map("start_time")
  endTime      DateTime @map("end_time")
  duration     Float

  userId String?  @map("user_id")
  tags   String[] @default([])
  extra  Json?

  // relations
  logs Log[]

  // dates
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // indices
  @@index([envId])
  // rename
  @@map("trace")
}
